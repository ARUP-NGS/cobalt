#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import argparse
import logging
import sys
import cobaltcnv
from cobaltcnv import training, prediction

logging.basicConfig(level=logging.INFO,
                    format='%(asctime)s --> %(message)s',
                    datefmt='%Y-%m-%d %H:%M:%S')

if __name__=="__main__":
    parser = argparse.ArgumentParser("Cobalt CNV caller version {}".format(cobaltcnv.__version__))

    subparsers = parser.add_subparsers(help='sub-command help', dest='subparser_name', title='sub-commands')

    train = subparsers.add_parser('train', help="Create a new CNV calling model from a depth file")

    train.add_argument("--depths", "-d", help="BED-formatted file with raw sample depths", required=True)
    train.add_argument("--save-model", "-o", help="Path to which trained model should be saved", required=True)
    train.add_argument("--var-cutoff", help="Proportion of variance to remove via SVD", type=float, default=0.90)
    train.add_argument("--no-mask", help="Turn off site masking", action='store_true', default=False)
    train.add_argument("--chunk-size", help="Number of sites to include in a chunk", type=int, default=1000)
    train.add_argument("--max-cv", help="Maximum depth CV for sample inclusion", type=float, default=1.0)

    predict = subparsers.add_parser('predict', help="Identify CNVs in a sample using a model")
    predict.add_argument("--model", "-m", help="Model file to use for prediction", required=True)
    predict.add_argument("--depths", "-d", help="BED-formatted file with raw sample depths", required=True)
    predict.add_argument("--min-qual", "-q", help="Minimum quality to emit CNV call", type=float, default=0.80)
    predict.add_argument("-o", "--output", help="Output path for prediction results", default=None)
    predict.add_argument("-bo", "--bed_output", help="Output bedfile path for prediction results (to be only provided with --vcf option)", required=False, default=None)
    predict.add_argument("-a", "--alpha", help="Transition parameter for HMM", default=0.05, type=float)
    predict.add_argument("-b", "--beta", help="Other transition parameter for HMM", default=0.05, type=float)
    predict.add_argument("--sex", help="Force assume sample sex, (=M, =F)", choices=['M', 'F'])
    predict.add_argument("-g", "--genome", help="Reference genome build, must be one of b37 or b38", choices=("b37", "b38"), default="b37")
    predict.add_argument("--vcf", help="Emit VCF output (requires -r reference fasta)", default=False, action='store_true')
    predict.add_argument("-r", "--reference", help="Path to reference genome fasta")
    predict.add_argument("-t", "--target-info", help="Write target-specific information to this path")
    predict.add_argument("-n", "--name", required=False, type=str, help="Sample name in emitted VCF")


    # plot = subparsers.add_parser('plot', help="Plot emission distributions and transformed depths for a range of sites")
    # plot.add_argument("--model", "-m", help="Model file")
    # plot.add_argument("--site", help="Which site to emit information for (either site index or region string)")

    describe = subparsers.add_parser('desc', help="Emit information about a model")
    describe.add_argument("--model", "-m", help="Model file", required=True)
    describe.add_argument("--emit-bed", "-b", help="Emit a BED file with information about each target", action='store_true', default=False)
    # describe.add_argument("--threshold", help="Max Kullback-Leibler distance between emission distributions for emitted targets", type=float, default=10.0)

    # parser.add_argument("--no-rm-outliers", help="Do not remove outlier data points during training", action='store_true', default=False)


    # parser.add_argument("--kl", help="Max Kullback-Leibler dist for site optimization, set this to 0.0 to disable site optimization", type=float, default=0.0)

    if len(sys.argv)==1:
        parser.print_usage()
        sys.exit(0)


    args = parser.parse_args()

    if args.subparser_name == "train":
        training.train(args.depths, 
                       args.save_model, 
                       use_depth_mask=not args.no_mask, 
                       var_cutoff=args.var_cutoff,
                       max_cv=args.max_cv,
                       chunk_size=args.chunk_size)

    elif args.subparser_name == "predict":
        assume_female = None
        if args.sex is not None:
            assume_female = args.sex == 'F'
        prediction.predict(args.model, args.depths,
                           output_path=args.output,
                           output_bed=args.bed_output,
                           min_quality=args.min_qual,
                           alpha=args.alpha,
                           beta=args.beta,
                           assume_female=assume_female,
                           outputvcf=args.vcf,
                           ref_path=args.reference,
                           emit_target_path=args.target_info,
                           samplename=args.name)

    elif args.subparser_name == "plot":
        raise NotImplemented()

    elif args.subparser_name == "desc":
        prediction.emit_site_info(args.model, args.emit_bed)

    else:
        logging.error("Unrecognized subcommand: {}".format(args.subparser_name))


